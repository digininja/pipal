
# A description of the file, used in verbose mode
$layout_description = "US keyboard layout (ANSI 104-key)"

$layout = {
				"`" => { 0 => "~", 1 => "1!" },
				"~" => { 0 => "`", 1 => "1!" },
				"1" => { 0 => "!", 1 => "2q`@~40" },
				"!" => { # The character !
					0 => "1", # is on the same key as 1
					1 => "2q`@~" # and is just one key away from 2, " and q
					# 2 => "3wa" # If you wanted to add keys two characters away you could with this line
				},
				"q" => { 1 => "12wa!@" },
				"a" => { 1 => "qwsz" },
				"z" => { 1 => "asx" },
				"2" => { 0 => "@", 1 => "3wq1#!50" },
				"@" => { 0 => "2", 1 => "3wq1#!" },
				"w" => { 1 => "23esaq@#" },
				"s" => { 1 => "wedxza" },
				"x" => { 1 => "sdcz" },
				"3" => { 0 => "#", 1 => "4ew2$@6." },
				"#" => { 0 => "3", 1 => "4ew2$@" },
				"e" => { 1 => "34rdsw#$" },
				"d" => { 1 => "erfcxs" },
				"c" => { 1 => "dfvx" },
				"4" => { 0 => "$", 1 => "5re3%#71" },
				"$" => { 0 => "4", 1 => "5re3%#" },
				"r" => { 1 => "45tfde$%" },
				"f" => { 1 => "rtgvcd" },
				"v" => { 1 => "fgbc" },
				"5" => { 0 => "%", 1 => "6tr4^$82" },
				"%" => { 0 => "5", 1 => "6tr4^$" },
				"t" => { 1 => "56ygfr%^" },
				"g" => { 1 => "tyhbvf" },
				"b" => { 1 => "ghnv" },
				"6" => { 0 => "^", 1 => "7yt5&%9+3" },
				"^" => { 0 => "6", 1 => "7yt5&%" },
				"y" => { 1 => "67uhgt^&" },
				"h" => { 1 => "yujnbg" },
				"n" => { 1 => "hjmb" },
				"7" => { 0 => "&", 1 => "8uy6*^4" },
				"&" => { 0 => "7", 1 => "8uy6*^" },
				"u" => { 1 => "78ijhy&*" },
				"j" => { 1 => "uikmnh" },
				"m" => { 1 => "jk,n<" },
				"8" => { 0 => "*", 1 => "9iu7(&/5" },
				"*" => { 0 => "8", 1 => "9iu7(&" },
				"i" => { 1 => "89okju*(" },
				"k" => { 1 => "iol,mj<" },
				"," => { 0 => "<", 1 => "kl.m>" },
				"<" => { 0 => ",", 1 => "kl.m>" },
				"9" => { 0 => "(", 1 => "0oi8)*+6" },
				"(" => { 0 => "9", 1 => "0oi8)*" },
				"o" => { 1 => "90plki()" },
				"l" => { 1 => "op;.,k:><" },
				"." => { 0 => ">", 1 => "l;/,:?<30" },
				">" => { 0 => ".", 1 => "l;/,:?<" },
				"0" => { 0 => ")", 1 => "-po9_(12." },
				")" => { 0 => "0", 1 => "-po9_(" },
				"p" => { 1 => "0-[;lo)_{:" },
				";" => { 0 => ":", 1 => "p['/.l{\"?>" },
				":" => { 0 => ";", 1 => "p['/.l{\"?>" },
				"/" => { 0 => "?", 1 => ";'.:\">*8" },
				"?" => { 0 => "/", 1 => ";'.:\">" },
				"-" => { 0 => "_", 1 => "=[p0+{)+*" },
				"_" => { 0 => "-", 1 => "=[p0+{)" },
				"[" => { 0 => "}", 1 => "-=]';p_+}\":" },
				"{" => { 0 => "[", 1 => "-=]';p_+}\":" },
				"'" => { 0 => "\"", 1 => "[]/;{}?:" },
				'"' => { 0 => "'", 1 => "[]/;{}?:" },
				"=" => { 0 => "+", 1 => "][-}{_" },
				"+" => { 0 => "=", 1 => "][-}{_69" },
				"]" => { 0 => "}", 1 => "=\\'[+|\"{" },				
				"}" => { 0 => "]", 1 => "=\\'[+|\"{" },
				"\\" => { 0 => "|", 1 => "]}" },
				"|" => { 0 => "\\", 1 => "]}" },
			}
}
# This is the furthest distance we are looking for as a jump + 1
# This could be calculated by the app when it starts up but that 
# seems like unnecessary work as you already know it when creating
# this file.
#
# You could also chose to penalise keys further away more by giving
# them a higher score.
MAX_SCORE = 2
